<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>suneshone</title>
  
  <subtitle>星海横流 岁月成碑</subtitle>
  <link href="https://blog.suneshone.com/atom.xml" rel="self"/>
  
  <link href="https://blog.suneshone.com/"/>
  <updated>2024-01-12T17:08:56.472Z</updated>
  <id>https://blog.suneshone.com/</id>
  
  <author>
    <name>suneshone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人博客搭建</title>
    <link href="https://blog.suneshone.com/2024/01/11/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.suneshone.com/2024/01/11/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2024-01-10T18:08:34.730Z</published>
    <updated>2024-01-12T17:08:56.472Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用 <a href="https://hexo.io/">Hexo</a>搭建个人博客？ 这是与之相关的详细 <a href="https://hexo.io/docs/">文档</a>。如果在使用Hexo中遇到问题, 可以在 <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a>或者 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>寻找答案.<span id="more"></span> </p><h2 id="指南"><a href="#指南" class="headerlink" title="指南"></a>指南</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><hr><h2 id="RSS支持"><a href="#RSS支持" class="headerlink" title="RSS支持"></a>RSS支持</h2><p>在hexo项目根目录下执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在_config.yml文件中配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>NexT主题中_config.yml中配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure><h3 id="在新电脑上编辑博客"><a href="#在新电脑上编辑博客" class="headerlink" title="在新电脑上编辑博客"></a>在新电脑上编辑博客</h3><p>你并不总是在固定的一台电脑上编辑自己的博客，如果有一天你需要在别的电脑上编辑自己的博客，你可以按照下面的方式进行操作。</p><p>首先在新的电脑上要安装<a href="https://nodejs.org/">Node.js</a>和Git软件。</p><p>如果你的博客项目文件放在U盘中或者以类似的方式存储，你可以直接拷贝到新的电脑上。</p><p>如果你的博客项目文件放在远程仓库上，比如放在<a href="https://github.com/">github</a>网站上，那么可以通过git来克隆自己放置在远程仓库的博客项目工程文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:suneshone/blog.git</span><br></pre></td></tr></table></figure><p>然后我们可以在新的电脑上安装 <a href="https://code.visualstudio.com/">vscode</a> 编辑软件，这个工具可以让我们更方便的来编辑自己的博客内容，也能更好的管理我们的项目文件。</p><p>接下来我们要对我们的电脑进行一些设置，来让我们vscode的TERMINAL工具正常使用而不报错，设置的步骤是：</p><ol><li>打开设置</li><li>进入更新和安全</li><li>选择开发者选项</li><li>勾选 <em>更改执行策略，以允许本地 PowerShell 脚本在未签名的情况下运行。远程脚本需要签名。</em> 的选项，然后应用。</li></ol><p>这是因为计算机上启动 Windows PowerShell 时，执行策略很可能是 Restricted（默认设置）。</p><ul><li>Restricted 执行策略不允许任何脚本运行。</li><li>AllSigned 和 RemoteSigned 执行策略可防止 Windows PowerShell 运行没有数字签名的脚本。</li></ul><p>想了解 计算机上的现用执行策略，打开PowerShell 然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get-executionpolicy</span><br></pre></td></tr></table></figure><p>以管理员身份打开PowerShell 执行 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-executionpolicy remotesigned</span><br></pre></td></tr></table></figure><p>执行之后根据提示操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; set-executionpolicy remotesigned</span><br><span class="line"></span><br><span class="line">执行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170</span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): Y</span><br></pre></td></tr></table></figure><p>上面我们输入“Y”确认操作。</p><p>然后我们在终端执行安装hexo-cli的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>最后我们就可以在vscode里编辑我们的博客了。</p><hr><p><a href="https://hexo.io/">Hexo</a> | <a href="https://theme-next.js.org/">NexT</a> | <a href="http://www.jetli.com.cn/">优秀的个人博客网站</a> | <a href="https://storeweb.cn/">个站商店</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如何使用 &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;搭建个人博客？ 这是与之相关的详细 &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;文档&lt;/a&gt;。如果在使用Hexo中遇到问题, 可以在 &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt;或者 &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;寻找答案.</summary>
    
    
    
    <category term="指南" scheme="https://blog.suneshone.com/categories/%E6%8C%87%E5%8D%97/"/>
    
    
    <category term="未完待续" scheme="https://blog.suneshone.com/tags/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="https://blog.suneshone.com/2024/01/03/%E9%97%AD%E5%8C%85/"/>
    <id>https://blog.suneshone.com/2024/01/03/%E9%97%AD%E5%8C%85/</id>
    <published>2024-01-03T07:54:24.000Z</published>
    <updated>2024-01-10T18:08:34.732Z</updated>
    
    <content type="html"><![CDATA[<p>函数A的返回值为函数B，在函数A外面可以通过函数B来访问函数A里的局部变量。</p><span id="more"></span><h2 id="变量污染"><a href="#变量污染" class="headerlink" title="变量污染"></a>变量污染</h2><p>变量污染就是全局变量滥用，造成报错，覆盖等问题；简单讲就是使用了相同的标识符声明了全局变量，var关键字声明相同的变量名会覆盖，let、const重复声明相同的变量名会直接报错；</p><ul><li>var 可以声明提升  可以重复声明  定义的变量是全局变量</li><li>const 、let可以声明块级作用域 </li><li>const声明时必须赋值</li></ul><h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">A</span>()();</span><br></pre></td></tr></table></figure><p>在A函数中定义一个B函数,通过B函数调用A的局部变量i.</p><p>所以闭包就是 函数A的返回值为函数B,在函数A外面可以通过函数B来访问函数A里的局部变量i</p><p>闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」。</p><p>因为如果是全局变量，容易被改，如果是局部变量，别人又访问不到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">xxx</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> lives = <span class="number">30</span></span><br><span class="line">   <span class="keyword">var</span> bug = <span class="string">&#x27;salkdjaslkdjaslkjd...100MB&#x27;</span>   <span class="comment">// IE bug</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">die</span>(<span class="params"></span>)&#123;</span><br><span class="line">     lives -= <span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> lives</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> die</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dieFn = <span class="title function_">xxx</span>()</span><br><span class="line"><span class="comment">// here</span></span><br><span class="line"><span class="keyword">var</span> currentLives = <span class="title function_">dieFn</span>()</span><br></pre></td></tr></table></figure><p>闭包造成内存泄露？</p><p>内存泄露是指你用不到（访问不到）的变量，依然占居着内存空间，不能被再次利用起来。</p><p>闭包里面的变量明明就是我们需要的变量（lives），所以不是内存泄露</p><p>为何有人说是？</p><p>因为 IE。IE 有 bug，IE 在我们使用完闭包之后，依然回收不了闭包里面引用的变量。</p><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p>声明一个匿名函数，立即执行它，就是立即执行函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> lives = <span class="number">30</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(lives)</span><br><span class="line">&#125;.<span class="title function_">call</span>()</span><br></pre></td></tr></table></figure><p>感叹号可以换成 + - ~ 等符号，也可以换成括号。</p><p>那为什么要有这么个东西（好麻烦）</p><p>只有一个作用：创建一个独立的作用域。</p><p>这个作用域里面的变量，外面访问不到（即避免「变量污染」）。</p><p>这个作用不就恰恰是闭包所需要的吗！！！</p><p>所以之前的函数可以写成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">!<span class="keyword">function</span> <span class="title function_">xxx</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> lives = <span class="number">30</span></span><br><span class="line">   <span class="keyword">var</span> bug = <span class="string">&#x27;salkdjaslkdjaslkjd...100MB&#x27;</span>   <span class="comment">// IE bug</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">die</span>(<span class="params"></span>)&#123;</span><br><span class="line">     lives -= <span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> lives</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> die</span><br><span class="line">&#125;.<span class="title function_">call</span>()</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> liList = ul.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line"> liList[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="title function_">alert</span>(i) <span class="comment">// 为什么 alert 出来的总是 6，而不是 0、1、2、3、4、5</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在点击之前i早变成了6，每个监听的元素都为6。</p><p>那么怎么解决这个问题呢？用立即执行函数给每个 li 创造一个独立作用域即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> liList = ul.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line"> !<span class="keyword">function</span>(<span class="params">ii</span>)&#123;</span><br><span class="line">   liList[ii].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="title function_">alert</span>(ii) <span class="comment">// 0、1、2、3、4、5</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在立即执行函数执行的时候，i 的值被赋值给 ii，此后 ii 的值一直不变。</p><p>i 的值从 0 变化到 5，对应 6 个立即执行函数，这 6 个立即执行函数里面的 ii 「分别」是 0、1、2、3、4、5。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;函数A的返回值为函数B，在函数A外面可以通过函数B来访问函数A里的局部变量。&lt;/p&gt;</summary>
    
    
    
    <category term="概念" scheme="https://blog.suneshone.com/categories/%E6%A6%82%E5%BF%B5/"/>
    
    
    <category term="javascript" scheme="https://blog.suneshone.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>异步与多线程</title>
    <link href="https://blog.suneshone.com/2024/01/03/%E5%BC%82%E6%AD%A5%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://blog.suneshone.com/2024/01/03/%E5%BC%82%E6%AD%A5%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2024-01-03T07:25:52.000Z</published>
    <updated>2024-01-10T18:08:34.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步与多线程"><a href="#异步与多线程" class="headerlink" title="异步与多线程"></a>异步与多线程</h2><p>异步是目的，而多线程是实现这个目的的方法。<span id="more"></span>异步是说，A发起一个操作后（一般都是比较耗时的操作，如果不耗时的操作就没有必要异步了），可以继续自顾自的处理它自己的事儿，不用干等着这个耗时操作返回。</p><ul><li>同步：一定要等任务执行完了，得到结果，才执行下一个任务。</li><li>异步：不等任务执行完，直接执行下一个任务。</li></ul><p>随着拥有多个硬线程CPU（超线程、双核）的普及，多线程和异步操作等并发程序设计方法也受到了更多的关注和讨论。本文主要是想探讨一下如何使用并发来最大化程序的性能。</p><h2 id="多线程和异步操作的异同"><a href="#多线程和异步操作的异同" class="headerlink" title="多线程和异步操作的异同"></a>多线程和异步操作的异同</h2><p>多线程和异步操作两者都可以达到避免调用线程阻塞的目的，从而提高软件的可响应性。甚至有些时候我们就认为多线程和异步操作是等同的概念。但是，多线程和异步操作还是有一些区别的。而这些区别造成了使用多线程和异步操作的时机的区别。</p><h2 id="异步操作的本质"><a href="#异步操作的本质" class="headerlink" title="异步操作的本质"></a>异步操作的本质</h2><p>所有的程序最终都会由计算机硬件来执行，所以为了更好的理解异步操作的本质，我们有必要了解一下它的硬件基础。 熟悉电脑硬件的朋友肯定对DMA这个词不陌生，硬盘、光驱的技术规格中都有明确DMA的模式指标，其实网卡、声卡、显卡也是有DMA功能的。DMA就是直 接内存访问的意思，也就是说，拥有DMA功能的硬件在和内存进行数据交换的时候可以不消耗CPU资源。只要CPU在发起数据传输时发送一个指令，硬件就开 始自己和内存交换数据，在传输完成之后硬件会触发一个中断来通知操作完成。这些无须消耗CPU时间的I&#x2F;O操作正是异步操作的硬件基础。所以即使在DOS 这样的单进程（而且无线程概念）系统中也同样可以发起异步的DMA操作。</p><h2 id="线程的本质"><a href="#线程的本质" class="headerlink" title="线程的本质"></a>线程的本质</h2><p>线程不是一个计算机硬件的功能，而是操作系统提供的一种逻辑功能，线程本质上是进程中一段并发运行的代码，所以线程需要操作系统投入CPU资源来运行和调度。</p><h2 id="异步操作的优缺点"><a href="#异步操作的优缺点" class="headerlink" title="异步操作的优缺点"></a>异步操作的优缺点</h2><p>因为异步操作无须额外的线程负担，并且使用回调的方式进行处理，在设计良好的情况下，处理函数可以不必使用共享变量（即使无法完全不用，最起码可以减少 共享变量的数量），减少了死锁的可能。当然异步操作也并非完美无暇。编写异步操作的复杂程度较高，程序主要使用回调方式进行处理，与普通人的思维方式有些 初入，而且难以调试。</p><h2 id="多线程的优缺点"><a href="#多线程的优缺点" class="headerlink" title="多线程的优缺点"></a>多线程的优缺点</h2><p>多线程的优点很明显，线程中的处理程序依然是顺序执行，符合普通人的思维习惯，所以编程简单。但是多线程的缺点也同样明显，线程的使用（滥用）会给系统带来上下文切换的额外负担。并且线程间的共享变量可能造成死锁的出现。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>在了解了线程与异步操作各自的优缺点之后，我们可以来探讨一下线程和异步的合理用途。我认为：当需要执行I&#x2F;O操作时，使用异步操作比使用线程+同步 I&#x2F;O操作更合适。I&#x2F;O操作不仅包括了直接的文件、网络的读写，还包括数据库操作、Web Service、HttpRequest以及.net Remoting等跨进程的调用。</p><p>而线程的适用范围则是那种需要长时间CPU运算的场合，例如耗时较长的图形处理和算法执行。但是往 往由于使用线程编程的简单和符合习惯，所以很多朋友往往会使用线程来执行耗时较长的I&#x2F;O操作。这样在只有少数几个并发操作的时候还无伤大雅，如果需要处 理大量的并发操作时就不合适了。</p><h2 id="异步调用与多线程"><a href="#异步调用与多线程" class="headerlink" title="异步调用与多线程"></a>异步调用与多线程</h2><p>异步调用并不是要减少线程的开销, 它的主要目的是让调用方法的主线程不需要同步等待在这个函数调用上, 从而可以让主线程继续执行它下面的代码.与此同时, 系统会通过从ThreadPool中取一个线程来执行,帮助我们将我们要写&#x2F;读的数据发送到网卡.由于不需要我们等待, 我们等于同时做了两件事情. 这个效果跟自己另外启动一个线程来执行等待方式的写操作是一样的.但是, 异步线程可以利用操作系统&#x2F;.Net的线程池, 系统可以根据吞吐量动态的管理线程池的大小.</p><p>异步与多线程,从辩证关系上来看,异步和多线程并不时一个同等关系,异步是目的,多线程只是我们实现异步的一个手段.什么是异步:异步是当一个调用请求发送给被调用者,而调用者不用等待其结果的返回.实现异步可以采用多线程技术或则交给另外的进程来处理</p><p>线程池的实现方法与线程是不一样的.初始化时在线程池里的线程为0.当进程需要一个线程时,创建一个线程,由此线程执行用户的方法.需要注意的是,此线程执行完后并不立即销毁,而是挂起等待,如果有其他方法需要执行,回唤醒进行处理.只有当它等到40秒(没有官方记录,有可能是其它数字)还没有任务执行时才唤醒自己,并销毁自己,释放资源.当然,如果线程池中的线程不够处理任务时,会再次创建一个新线程进行执行.</p><p>异步有的时候用普通的线程，有的时候用系统的异步调用功能。有一些IO操作也是异步的，但是未必需要一个线程来运行。例如：硬件是有DMA功能的，在调用DMA传输数据的时候，CPU是不需要执行处理的，只需要发起传输和等待传输结束即可。具体到.net平台，比如Socket的BeginSend，如果是运行在Windows    2000以后的平台，在底层就会调用异步的完成端口来发送。</p><p>.Net中的异步执行其实使用的是异步委托。异步委托将要执行的方法提交到.net的线程池，由线程池中的线程来执行异步方法。</p><p>异步执行也得执行，不在当前线程执行，当然得去另外一个线程执行。异步通常用系统线程池的线程，通常情况下性能好些。（因为可以多次利用，申请时不需要重新申请一个线程，只需要从池里取就行了。）异步是一种效果，多线程是一种具体技术。可以说，用“多线程”实现“异步”。</p><p>异步和多线程是两个不同的概念，不能这样比较.异步请求一般用在IO等耗时操作上，他的好处是函数调用立即返回，相应的工作线程立即返还给系统以供重用。由于系统的线程资源是非常宝贵的，通常有一定的数目限制，如.net默认是25。若使用异步方式，用这些固定数目的线程在固定的时间内就可以服务更多的请求，而如果用同步方式，那么每个请求都自始至终占用这一个线程，服务器可以同时服务的请求数就少了。当异步操作执行完成后，系统会从可用线程中选取一个执行回调程序，这时的这个线程可能是刚开始发出请求的那个线程，也可能是其他的线程，因为系统选取线程是随机的事情，所以不能说绝对不是刚开始的那个线程。多线程是用来并发的执行多个任务。</p><p>不过有个问题，异步有时优先级比主线程还高。这个特点和多线程不同。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;异步与多线程&quot;&gt;&lt;a href=&quot;#异步与多线程&quot; class=&quot;headerlink&quot; title=&quot;异步与多线程&quot;&gt;&lt;/a&gt;异步与多线程&lt;/h2&gt;&lt;p&gt;异步是目的，而多线程是实现这个目的的方法。</summary>
    
    
    
    <category term="概念" scheme="https://blog.suneshone.com/categories/%E6%A6%82%E5%BF%B5/"/>
    
    
    <category term="异步" scheme="https://blog.suneshone.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
    <category term="多线程" scheme="https://blog.suneshone.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>版本号规范</title>
    <link href="https://blog.suneshone.com/2024/01/03/%E7%89%88%E6%9C%AC%E5%8F%B7%E8%A7%84%E8%8C%83/"/>
    <id>https://blog.suneshone.com/2024/01/03/%E7%89%88%E6%9C%AC%E5%8F%B7%E8%A7%84%E8%8C%83/</id>
    <published>2024-01-03T06:11:16.000Z</published>
    <updated>2024-01-10T18:08:34.731Z</updated>
    
    <content type="html"><![CDATA[<p>语义化版本格式：主版本号.次版本号.修订号（MAJOR.MINOR.PATCH）。</p><span id="more"></span><p>版本号递增规则如下：</p><ul><li>主版本号：做了不兼容的 API 修改（进行不向下兼容的修改）</li><li>次版本号：做了向下兼容的功能性增加（API 保持向下兼容的新增及修改）</li><li>修订号：做了向下兼容的问题修正（修复问题但不影响 API）</li></ul><p>具体文档：<a href="https://semver.org/lang/zh-CN/">语义化版本 2.0.0</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;语义化版本格式：主版本号.次版本号.修订号（MAJOR.MINOR.PATCH）。&lt;/p&gt;</summary>
    
    
    
    <category term="概念" scheme="https://blog.suneshone.com/categories/%E6%A6%82%E5%BF%B5/"/>
    
    
    <category term="version" scheme="https://blog.suneshone.com/tags/version/"/>
    
  </entry>
  
  <entry>
    <title>回调函数</title>
    <link href="https://blog.suneshone.com/2024/01/03/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>https://blog.suneshone.com/2024/01/03/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</id>
    <published>2024-01-03T03:46:15.000Z</published>
    <updated>2024-01-10T18:08:34.730Z</updated>
    
    <content type="html"><![CDATA[<p>回调函数就是一个被作为参数传递的函数。<span id="more"></span>在C语言中，回调函数只能使用函数指针实现，在C++、Python、ECMAScript等更现代的编程语言中还可以使用仿函数或匿名函数。</p><p>回调函数的使用可以大大提升编程的效率，这使得它在现代编程中被非常多地使用。同时，有一些需求必须要使用回调函数来实现。</p><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>异步代码执行是一种简单的以任意顺序执行的方式，有时是很常见的有很多层级的回调函数，你看起来像下面这样的代码。下面这种凌乱的代码称作“回调地狱”，因为它是一种包含非常多的回调的麻烦的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p_client = <span class="keyword">new</span> <span class="title class_">Db</span>(<span class="string">&#x27;integration_tests_20&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">27017</span>, &#123;&#125;), &#123;<span class="string">&#x27;pk&#x27;</span>:<span class="title class_">CustomPKFactory</span>&#125;);</span><br><span class="line">p_client.<span class="title function_">open</span>(<span class="keyword">function</span>(<span class="params">err, p_client</span>) &#123;</span><br><span class="line">    p_client.<span class="title function_">dropDatabase</span>(<span class="keyword">function</span>(<span class="params">err, done</span>) &#123;</span><br><span class="line">        p_client.<span class="title function_">createCollection</span>(<span class="string">&#x27;test_custom_key&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, collection</span>) &#123;</span><br><span class="line">            collection.<span class="title function_">insert</span>(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;, <span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">                collection.<span class="title function_">find</span>(&#123;<span class="string">&#x27;_id&#x27;</span>:<span class="keyword">new</span> <span class="title class_">ObjectID</span>(<span class="string">&quot;aaaaaaaaaaaa&quot;</span>)&#125;, <span class="keyword">function</span>(<span class="params">err, cursor</span>) &#123;</span><br><span class="line">                    cursor.<span class="title function_">toArray</span>(<span class="keyword">function</span>(<span class="params">err, items</span>) &#123;</span><br><span class="line">                        test.<span class="title function_">assertEquals</span>(<span class="number">1</span>, items.<span class="property">length</span>);</span><br><span class="line"> </span><br><span class="line">                        <span class="comment">// Let&#x27;s close the db</span></span><br><span class="line">                        p_client.<span class="title function_">close</span>();</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你不太可能在自己的代码里碰到这个的问题，但如果你碰到了(或以后偶然碰到了)，那么有以下两种方式解决这个问题。</p><ul><li>命名并定义你的函数，然后传递函数名作为回调，而不是在主函数的参数列表里定义一个匿名函数。</li><li>模块化：把你的代码划分成一个个模块，这样你可以空出一部分代码块做特殊的工作。然后你可以将这个模型引入到你的大型应用程序中。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;回调函数就是一个被作为参数传递的函数。</summary>
    
    
    
    <category term="概念" scheme="https://blog.suneshone.com/categories/%E6%A6%82%E5%BF%B5/"/>
    
    
    <category term="javascript" scheme="https://blog.suneshone.com/tags/javascript/"/>
    
    <category term="node.js" scheme="https://blog.suneshone.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js入门</title>
    <link href="https://blog.suneshone.com/2023/12/29/Node-js%E5%85%A5%E9%97%A8/"/>
    <id>https://blog.suneshone.com/2023/12/29/Node-js%E5%85%A5%E9%97%A8/</id>
    <published>2023-12-29T02:15:42.000Z</published>
    <updated>2024-01-10T18:08:34.729Z</updated>
    
    <content type="html"><![CDATA[<p>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。<br>Node.js 是一个事件驱动 I&#x2F;O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。</p><span id="more"></span><blockquote><p>Node.js® is an open-source, cross-platform JavaScript runtime environment.<br><a href="https://nodejs.org/en">Node.js</a></p></blockquote><h2 id="Javascript与Nodejs"><a href="#Javascript与Nodejs" class="headerlink" title="Javascript与Nodejs"></a>Javascript与Nodejs</h2><p>Node.js 不是一门编程语言，它是一个执行 JavaScript 代码的工具。工具是指可以安装在计算机操作系统之上的软件。</p><p><strong>为什么浏览器和 Node.js 都可以运行 JavaScript？</strong></p><p>因为浏览器和 Node.js 都内置了 JavaScript V8 Engine。<br>它可以将 JavaScript 代码编译为计算机能够识别的机器码。</p><p><strong>浏览器中运行的 JavaScript 和 Node.js 中运行的 JavaScript 有区别吗？</strong></p><p>在内置了 JavaScript V8 Engine 以后实际上只能执行 ECMAScript，就是语言中的语法部分。</p><p>浏览器为了能够让 JavaScript 操作浏览器窗口以及 HTML 文档，所以在 JavaScript V8 Engine 中添加了控制它们的 API, 就是 DOM 和 BOM. 所以 JavaScript 在浏览器中运行时是可以控制浏览器窗口对象和DOM文档对象的。</p><p>和浏览器不同，在 Node.js 中是没有 DOM 和 BOM 的，所以在 Node.js 中不能执行和它们相关的代码，比如 <code>window.alert()</code>  或者 <code>document.getElementById()</code> 。DOM 和 BOM 是浏览器环境中特有的。在 Node.js 中，作者向其中添加了很多系统级别的 API，比如对操作系统中的文件和文件夹进行操作。获取操作系统信息，比如系统内存总量是多少，系统临时目录在哪，对系统的进程进行操作等等。</p><ul><li>JavaScript 运行在浏览器中控制的是浏览器窗口和 DOM 文档。</li><li>JavaScript 运行在 Node.js 中控制的操作系统级别的内容。</li></ul><p><strong>为什么浏览器中的 JavaScript 不能控制系统级别的 API ?</strong></p><ul><li><p><strong>浏览器是运行在用户的操作系统中的，如果能控控制系统级别的 API 就会存在安全问题。</strong> <em>（当用户去访问一个网站的时候，这个网站上的javascript代码绝对不会控制你的电脑，不会在你电脑上新增文件或者修改删除文件。除了控制浏览器之外，不会也不能够调用系统的API,否则你就会在不知情的情况下电脑被攻击了，例如windows上的exe程序是能够系统级别的API的，所以如果在下载exe程序的时候，通常会给出警告信息）。</em></p></li><li><p><strong>Node.js 是运行在远程的服务器中的，访问的是服务器系统 API，不存在这方面的安全问题。</strong> <em>（因为这部分代码是服务器需要运行的，如果不能使用系统级别的API。那他与浏览器中的javascript有什么区别，而且这些代码不是交给客户的浏览器使用，不会威胁到客户的机器，仅仅是在服务器上运行，起到提供服务的功能，不与客户产生直接交互）</em></p></li></ul><blockquote><p>一个是基于浏览器端的 javascript （前端 JS）,一个是基于服务端的 javascript （后端 Node.js）</p><ol><li>语法一样</li><li>组成不一样</li></ol><p>JavaScript：</p><ul><li>ECMAScript（语言基础，如：语法、数据类型结构以及一些内置对象）</li><li>DOM（一些操作页面元素的方法）</li><li>BOM（一些操作浏览器的方法）</li></ul><p>Node.js：</p><ul><li>ECMAScript（语言基础，如：语法、数据类型结构以及一些内置对象）</li><li>OS（操作系统）</li><li>file（文件系统）</li><li>net（网络系统）</li><li>database（数据库）</li></ul></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在<a href="https://nodejs.org/en">Node.js</a>下载，然后安装即可</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node helloworld.js</span><br></pre></td></tr></table></figure><h2 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = <span class="built_in">require</span>(<span class="string">&#x27;module-name&#x27;</span>);</span><br></pre></td></tr></table></figure><p>其中，module-name 可以是一个文件路径（相对或绝对路径），也可以是一个模块名称，如果是一个模块名称，Node.js 会自动从 node_modules 目录中查找该模块。</p><p>require 指令会返回被加载的模块的导出对象，可以通过该对象来访问模块中定义的属性和方法，如果模块中有多个导出对象，则可以使用解构赋值的方式来获取它们。</p><p>我们使用 require 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送响应数据 &quot;Hello World&quot;</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World\n&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:8888/&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br><span class="line">9.2.0</span><br></pre></td></tr></table></figure><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;Module Name&gt;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><p>安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require(‘express’) 的方式就好，无需指定第三方包路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="全局安装与本地安装"><a href="#全局安装与本地安装" class="headerlink" title="全局安装与本地安装"></a>全局安装与本地安装</h4><p>pm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已，比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express       # 本地安装</span><br><span class="line">npm install express -g    # 全局安装</span><br></pre></td></tr></table></figure><h5 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h5><ol><li><p>将安装包放在 .&#x2F;node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</p></li><li><p>可以通过 require() 来引入本地安装的包。</p></li></ol><h5 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h5><ol><li>将安装包放在 &#x2F;usr&#x2F;local 下或者你 node 的安装目录。</li><li>可以直接在命令行里使用。</li></ol><p>如果你希望具备两者功能，则需要在两个地方安装它或使用 <code>npm link</code></p><h3 id="查看安装信息"><a href="#查看安装信息" class="headerlink" title="查看安装信息"></a>查看安装信息</h3><p>你可以使用以下命令来查看所有全局安装的模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list -g</span><br></pre></td></tr></table></figure><p>如果要查看某个模块的版本号，可以使用命令如下(查看全局需要加 <code>-g</code>)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list grunt</span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;express&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fast, unopinionated, minimalist web framework&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.13.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TJ Holowaychuk&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tj@vision-media.ca&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;contributors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Aaron Heckmann&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aaron.heckmann+github@gmail.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ciaran Jessup&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ciaranj@gmail.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Douglas Christopher Wilson&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doug@somethingdoug.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Guillermo Rauch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rauchg@gmail.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jonathan Ong&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;me@jongleberry.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Roman Shtylman&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shtylman+expressjs@gmail.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Young Jae Sim&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hanul@hanul.me&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://github.com/strongloop/express.git&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://expressjs.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;express&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;framework&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;sinatra&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;web&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;rest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;restful&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;router&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;api&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;accepts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.2.12&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;array-flatten&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content-disposition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content-type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cookie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cookie-signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;depd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;escape-html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;etag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;finalhandler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fresh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;merge-descriptors&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;methods&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;on-finished&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parseurl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path-to-regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;proxy-addr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.0.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;qs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;range-parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;send&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.13.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serve-static&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.10.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type-is&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.6.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;utils-merge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.8.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;istanbul&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.3.17&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.3.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mocha&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.2.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;supertest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body-parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.13.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;connect-redis&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cookie-parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.3.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cookie-session&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;express-session&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.11.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.11.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;method-override&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~2.3.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;morgan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~1.6.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;multiparty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vhost&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~3.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;= 0.10.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;LICENSE&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;History.md&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Readme.md&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;lib/&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test-ci&quot;</span><span class="punctuation">:</span> <span class="string">&quot;istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test-cov&quot;</span><span class="punctuation">:</span> <span class="string">&quot;istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test-tap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gitHead&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ef7ad681b245fba023843ce94f6bcb8e275bbb8e&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bugs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/strongloop/express/issues&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;express@4.13.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shasum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ddb2f1fb4502bf33598d2b032b037960ca6c80a3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;express@*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_npmVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.4.28&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_npmUser&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dougwilson&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doug@somethingdoug.com&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;maintainers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tjholowaychuk&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tj@vision-media.ca&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jongleberry&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jonathanrichardong@gmail.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dougwilson&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doug@somethingdoug.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rfeng&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;enjoyjava@gmail.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aredridel&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aredridel@dinhe.net&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;strongloop&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;callback@strongloop.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;defunctzombie&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shtylman@gmail.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dist&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;shasum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ddb2f1fb4502bf33598d2b032b037960ca6c80a3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tarball&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://registry.npmjs.org/express/-/express-4.13.3.tgz&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;directories&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_resolved&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://registry.npmjs.org/express/-/express-4.13.3.tgz&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;readme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ERROR: No README data found!&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>name - 包名。</li><li>version - 包的版本号。</li><li>description - 包的描述。</li><li>homepage - 包的官网 url 。</li><li>author - 包的作者姓名。</li><li>contributors - 包的其他贡献者姓名。</li><li>dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</li><li>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</li><li>main - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</li><li>keywords - 关键字</li></ul><h3 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h3><p>我们可以使用以下命令来卸载 Node.js 模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall express</span><br></pre></td></tr></table></figure><p>卸载后，你可以到 &#x2F;node_modules&#x2F; 目录下查看包是否还存在，或者使用以下命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure><h3 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update express</span><br></pre></td></tr></table></figure><h3 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a>搜索模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm search express</span><br></pre></td></tr></table></figure><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm init</span></span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm help json` for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt; --save` afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">name: (node_modules) runoob                   # 模块名</span><br><span class="line">version: (1.0.0) </span><br><span class="line">description: Node.js 测试模块(www.runoob.com)  # 描述</span><br><span class="line">entry point: (index.js) </span><br><span class="line">test command: make test</span><br><span class="line">git repository: https://github.com/runoob/runoob.git  # Github 地址</span><br><span class="line">keywords: </span><br><span class="line">author: </span><br><span class="line">license: (ISC) </span><br><span class="line">About to write to ……/node_modules/package.json:      # 生成地址</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;runoob&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Node.js 测试模块(www.runoob.com)&quot;,</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this ok? (yes) yes</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上的信息，你需要根据你自己的情况输入。在最后输入 “yes” 后会生成 package.json 文件。</p><p>接下来我们可以使用以下命令在 npm 资源库中注册用户（使用邮箱注册）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm adduser</span></span><br><span class="line">Username: mcmohd</span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public) mcmohd@gmail.com</span><br></pre></td></tr></table></figure><p>接下来我们就用以下命令来发布模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm publish</span></span><br></pre></td></tr></table></figure><p>如果你以上的步骤都操作正确，你就可以跟其他模块一样使用 npm 来安装。</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>文件 <em>test.txt</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www.suneshone.com</span><br><span class="line">所爱隔山海 山海不可平</span><br></pre></td></tr></table></figure><p>代码 <em>demo.js</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异步读取：&quot;</span> + data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步读取</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;test.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;同步读取&quot;</span> + data.<span class="title function_">toString</span>())</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序执行完毕&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node demo.js</span><br><span class="line">同步读取www.suneshone.com</span><br><span class="line">所爱隔山海 山海不可平</span><br><span class="line">程序执行完毕</span><br><span class="line">异步读取：www.suneshone.com</span><br><span class="line">所爱隔山海 山海不可平</span><br></pre></td></tr></table></figure><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">open</span>(path, flags[, mode], callback)</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>path 文件路径</li><li>flags 文件打开行为</li><li>mode 设置文件模式（权限），文件创建默认权限为0666（可读，可写）</li><li>callback 回调函数，带有两个参数 <code>callback(err,fd)</code></li></ul><p>flags 参数值</p><table><thead><tr><th>Flag</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以读取模式打开文件。如果文件不存在抛出异常。</td></tr><tr><td>r+</td><td>以读写模式打开文件。如果文件不存在抛出异常。</td></tr><tr><td>rs</td><td>以同步的方式读取文件。</td></tr><tr><td>rs+</td><td>以同步的方式读取和写入文件。</td></tr><tr><td>w</td><td>以写入模式打开文件，如果文件不存在则创建。</td></tr><tr><td>wx</td><td>类似 ‘w’，但是如果文件路径存在，则文件写入失败。</td></tr><tr><td>w+</td><td>以读写模式打开文件，如果文件不存在则创建。</td></tr><tr><td>wx+</td><td>类似 ‘w+’， 但是如果文件路径存在，则文件读写失败。</td></tr><tr><td>a</td><td>以追加模式打开文件，如果文件不存在则创建。</td></tr><tr><td>ax</td><td>类似 ‘a’， 但是如果文件路径存在，则文件追加失败。</td></tr><tr><td>a+</td><td>以读取追加模式打开文件，如果文件不存在则创建。</td></tr><tr><td>ax+</td><td>类似 ‘a+’， 但是如果文件路径存在，则文件读取追加失败。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单的说 Node.js 就是运行在服务端的 JavaScript。&lt;br&gt;Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。&lt;br&gt;Node.js 是一个事件驱动 I&amp;#x2F;O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。&lt;/p&gt;</summary>
    
    
    
    <category term="指南" scheme="https://blog.suneshone.com/categories/%E6%8C%87%E5%8D%97/"/>
    
    
    <category term="javascript" scheme="https://blog.suneshone.com/tags/javascript/"/>
    
    <category term="node.js" scheme="https://blog.suneshone.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>知识如何变成金钱</title>
    <link href="https://blog.suneshone.com/2023/12/25/%E7%9F%A5%E8%AF%86%E5%A6%82%E4%BD%95%E5%8F%98%E6%88%90%E9%87%91%E9%92%B1/"/>
    <id>https://blog.suneshone.com/2023/12/25/%E7%9F%A5%E8%AF%86%E5%A6%82%E4%BD%95%E5%8F%98%E6%88%90%E9%87%91%E9%92%B1/</id>
    <published>2023-12-25T06:39:13.000Z</published>
    <updated>2024-01-10T18:08:34.732Z</updated>
    
    <content type="html"><![CDATA[<p>当学会很多知识之后，通过努力开发了一款软件，如果想要卖钱怎么做呢？</p><span id="more"></span><p>我们不能把做好的软件直接卖给别人使用，因为软件的复制几乎没有任何成本，除非别人直接买断。</p><blockquote><ol><li>买断</li></ol><p>买断版权意味着您将一次性支付一笔费用，以获得该作品的完全所有权利。这意味着您可以随意使用、修改和分发该作品，而无需向版权所有者支付任何额外的费用。买断版权是一种较为永久的解决方案，您可以在全球范围内自由使用所购买的内容。</p><p>然而，买断版权也有其不利因素。首先，您需要支付的费用可能较高，这取决于作品的受欢迎程度和版权所有者的要价。其次，如果您不再需要使用该作品，您将无法将其转售或授权给他人使用。因此，买断版权需要考虑到作品的长期使用价值。</p><ol start="2"><li>授权</li></ol><p>与买断不同，授权意味着您将与版权所有者达成协议，以获得在特定时间内使用作品的权利。这通常是一种更便宜的选择，因为您可以根据实际需求选择短期或长期授权。此外，授权还可以让您在特定条件下将作品转售给其他人。</p><p>授权的优点在于灵活性。您可以根据项目或活动的需要选择短期或长期使用权。此外，如果您的需求发生变化，您还可以与版权所有者协商修改协议。然而，授权也有其不利因素。您可能会受到使用限制，例如使用范围、使用时间或修改程度等。此外，如果您希望在授权期限后继续使用该作品，您可能需要重新谈判协议或购买其他使用权。</p></blockquote><p>目前大部分商业软件在提供注册码时，基本上采用了以下几种机制来实现，当然，这几种方式各有其优劣。</p><h2 id="远程联网激活"><a href="#远程联网激活" class="headerlink" title="远程联网激活"></a>远程联网激活</h2><p>在软件每次启动时，都会联网检查软件使用情况，检查使用时间是否到期，是否是多设备使用等。这种方式控制是非常棒的，动态性、实时性都非常好，但劣势也非常明显，就是客户机软件要联网，如若没有联网就无法控制了。</p><h2 id="本地生成注册"><a href="#本地生成注册" class="headerlink" title="本地生成注册"></a>本地生成注册</h2><p>这种方式是根据客户机的环境，获取客户机的信息，比如硬盘、MAC地址、CPU等硬件信息，根据一定的算法将这些信息生成一个注册码。目前超过一半的软件都是采用这种方式来实现的，这种方式的缺点是不能自由地控制软件的其它参数，比如软件中可添加设备的数量。</p><h2 id="配套密钥文件"><a href="#配套密钥文件" class="headerlink" title="配套密钥文件"></a>配套密钥文件</h2><p>在软件发行的过程中，用软件运行到期时间、运行数量限制和已运行时间等参数生成一个密钥文件，配套发送给用户使用。在软件启动时，直接加载这个密钥文件进行检查。这种方式的缺点在于密钥文件的参数选择上不好把控，若只仅仅设置运行到期时间，用户可以轻松修改电脑时间来获取更长使用时间（在不联网同步时间的情况下）。</p><p>通过获取客户机的信息组合成字符串，再加密生成一个激活码</p><p>在Windows系统环境下，可以通过wmic命令获取客户机相应的信息，其具体的方式如下：</p><p>获取cpu名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic cpu get Name</span><br></pre></td></tr></table></figure><p>获取cpu核心数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic cpu get NumberOfCores</span><br></pre></td></tr></table></figure><p>获取cpu线程数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic cpu get NumberOfLogicalProcessors</span><br></pre></td></tr></table></figure><p>查询cpu序列号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic cpu get processorid</span><br></pre></td></tr></table></figure><p>查询主板序列号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic baseboard get serialnumber</span><br></pre></td></tr></table></figure><p>查询BIOS序列号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic bios get serialnumber</span><br></pre></td></tr></table></figure><p>查看硬盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic diskdrive get serialnumber</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/204988284">商业软件的注册码激活码的实现方法及代码示例（收藏备用） - 可吉拉多的文章 - 知乎</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当学会很多知识之后，通过努力开发了一款软件，如果想要卖钱怎么做呢？&lt;/p&gt;</summary>
    
    
    
    <category term="指南" scheme="https://blog.suneshone.com/categories/%E6%8C%87%E5%8D%97/"/>
    
    
    <category term="未完待续" scheme="https://blog.suneshone.com/tags/%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD/"/>
    
    <category term="注册码" scheme="https://blog.suneshone.com/tags/%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    
    <category term="激活码" scheme="https://blog.suneshone.com/tags/%E6%BF%80%E6%B4%BB%E7%A0%81/"/>
    
    <category term="加密" scheme="https://blog.suneshone.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>python环境管理</title>
    <link href="https://blog.suneshone.com/2023/12/22/python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/"/>
    <id>https://blog.suneshone.com/2023/12/22/python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</id>
    <published>2023-12-22T01:03:06.000Z</published>
    <updated>2024-01-10T18:08:34.730Z</updated>
    
    <content type="html"><![CDATA[<p>使用python编写代码过程中，一般版本升级都会兼容就版本，不过当使用的第三方库版本更新时，还是会偶尔遇到不兼容过去代码的情况，有时候拿到别人的代码，别人的代码确实基于旧版第三方库编写的，由于自己的电脑第三方库版本比较新，新库对旧的接口做了调整，导致无法运行，这样就不得不把自己的第三方库卸载重新安装旧版本的库，有时候为了装一个老点库，会报一些自己难以理解的错误，不得不把python也换成旧版的。总之，我们需要一个python环境管理工具。</p><span id="more"></span><p>在使用pycharm工具开发程序的时候，可以在电脑上安装多个版本的python解释器，然后在项目设置中可以指定使用哪个版本的解释器，而且可以针对此项目，通过虚拟环境来安装第三方库，从而来解决令人烦恼的版本冲突问题。</p><p>（写的很简略，以下为各种相关工具官网，可以查看详细指南）</p><h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><ul><li><a href="https://virtualenv.pypa.io/">virtualenv</a></li><li><a href="https://anaconda.org/anaconda/conda">conda</a> | <a href="https://anaconda.org.cn/">Anaconda中文网</a></li><li><a href="https://python-poetry.org/">poetry</a></li><li><a href="https://pipenv.pypa.io/en/latest/">pipenv</a></li><li><a href="https://docs.python.org/zh-cn/3/library/venv.html">venv</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用python编写代码过程中，一般版本升级都会兼容就版本，不过当使用的第三方库版本更新时，还是会偶尔遇到不兼容过去代码的情况，有时候拿到别人的代码，别人的代码确实基于旧版第三方库编写的，由于自己的电脑第三方库版本比较新，新库对旧的接口做了调整，导致无法运行，这样就不得不把自己的第三方库卸载重新安装旧版本的库，有时候为了装一个老点库，会报一些自己难以理解的错误，不得不把python也换成旧版的。总之，我们需要一个python环境管理工具。&lt;/p&gt;</summary>
    
    
    
    <category term="指南" scheme="https://blog.suneshone.com/categories/%E6%8C%87%E5%8D%97/"/>
    
    
    <category term="python" scheme="https://blog.suneshone.com/tags/python/"/>
    
    <category term="pip" scheme="https://blog.suneshone.com/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>RSS与Feed</title>
    <link href="https://blog.suneshone.com/2023/12/21/RSS%E4%B8%8EFeed/"/>
    <id>https://blog.suneshone.com/2023/12/21/RSS%E4%B8%8EFeed/</id>
    <published>2023-12-21T05:59:45.000Z</published>
    <updated>2024-01-10T18:08:34.730Z</updated>
    
    <content type="html"><![CDATA[<p>如果没有RSS，用户就不得不每日都来您的网站检查新的内容。对许多用户来说这样太费时了。通过 RSS feed（RSS 通常被称为 News feed 或 RSS feed），用户们可以使用 RSS 聚合器来更快地检查您的网站更新（RSS 聚合器是用来聚集并分类 RSS feed 的网站或软件）。</p><span id="more"></span><h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>RSS的全称为 RDF Site Summary，也有一部分叫它 Really Simple Syndication，翻译成中文就是简易信息聚合。指的是用于发布站点更新的数种 XML 文档格式。RSS是一类消息来源格式规范的俗称，用以聚合多个网站更新的内容并自动通知网站订阅者。因此你无需手动查看所有喜爱的网站就可以获取这些网站的更新动态。,用来提供这样信息资源的规范都可以叫做RSS，常见的RSS规范有rss和atom两种。</p><h2 id="Feed"><a href="#Feed" class="headerlink" title="Feed"></a>Feed</h2><p>我们常常能听到Feed流的说法，Feed是用来关注和订阅网站的一类应用程序，它是一个能让你在一个地方订阅各种感兴趣网站的工具，或者说是阅读器。比较典型的用处就是订阅博客文章。</p><p>出于种种原因，许多博主都建了自己的私人博客站点，我们关注一两个博主还好，当我们同时关注许多博主时，由于他们的更新时间并不固定，我们常常不能第一时间得到消息。这时，Feed的优势就体现出来了，使用Feed阅读器，只需将喜欢博客的Feed流链接加到阅读器中，在自己的Feed阅读器上，就可以及时看到所有订阅的博主的资讯，自己已经读过的，自己还未读的，并且可以对所有的订阅随意的分类分栏。</p><p>Feed除了用于订阅自己喜欢的博主之外，理论上来说还可以订阅其他一切会更新的资源内容。你可以在你的Feed阅读器上，订阅你喜欢的up主，关注他的投稿更新；你可以添加你想关注的新闻网站的特定栏目，了解最新的新闻资讯；你可以添加你喜欢的淘宝店铺，关注它的商品上新；你可以订阅Github上的仓库，可以及时通知你仓库的更新，甚至是大学的教务网站公告栏,当你使用Feed，万物皆可被订阅。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通常来说，网站会提供给你一个Feed网址，一般是一个图标，可以直接点击跳转，但是也有一些藏在html格式的link标签里，需要自己好好找一找。用户只需将网站提供的网址登记到自己的Feed阅读器中，就可以订阅最新资讯了。</p><p>那么这时候有小伙伴就会问了，如果网站没有提供Feed接口该怎么办呢？那就只能自己写爬虫了，通过爬虫获取当前的网站html，并按rss或者atom的格式规范对数据进行转换，就可以给Feed阅读器使用了。</p><p>当然，不会自己写爬虫也没有关系，大神DIYGod已经在Github上开源了一个生成Feed链接的项目RSSHub，这是一个开源的，简单易用，易于拓展的RSS生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。有兴趣的小伙伴可以自行查看它的官方文档，目前已经生成了大部分你能想到的Feed源，比较常用的浏览器扩展 RSSHub Radar 也是基于此开发。</p><p>Feed阅读器的实现原理其实非常简单，订阅之后，阅读器通过轮询的的pull机制，每隔一段时间就通过接口调用遍历所有登记的网址，检查更新。阅读器获取到rss或者atom格式的数据之后，该以什么样式在阅读器上展示，显示哪些数据，那就是它的事了。</p><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>使用RSS进行信息获取，我觉得有三点优势。首先，正如上文所提到的，它真正的做到了内容聚合，将你日常生活中的一切需要获取的资讯都整合到一处（追剧，比赛日程，喜欢的博主更新），让你免受各种APP的弹窗折磨。<br>其次，使用它进行消息订阅，不需要透露你的个人信息，你不需通过像其他社交软件那样，通过添加关注的方式，就能了解你想要关注的东西，这或多或少保证了你的关注隐私。添加Feed类似邮件，只不过邮件订阅还需要向网站提供邮箱地址，同时还可能存在垃圾邮件骚扰的困扰。<br>最后一点就是，使用RSS或者说是Feed，彻底杜绝了推荐算法的毒害。Feed表面上是进行资源聚合，其实远不止于此。如今，各类APP早已变得不再纯粹，各种推荐算法满天飞，知乎，小红书，抖音……推荐算法的存在让你越来越变得像它所认为的你，我们在无意识中被毫无意义的推荐内容浪费了太多的时间，却乐在其中。技术不应该用来掌控人类，使用RSS，能够给你一个自己决定要看什么的机会。</p><p>来源：<a href="https://juejin.cn/post/7159858445288964133"><em>万物皆可被订阅——RSS and Feed</em> </a> Rico666 2022-10-29 有删改</p><p>相关内容</p><ul><li>人物：亚伦·希勒尔·斯沃茨 参与开发了RSS消息來源发布格式、Markdown文本发布格式、知识共享组织、web.py网站开发框架，同时是社交媒体Reddit的联合创始人。于2013年去世</li><li>纪录片：《互联网之子》</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果没有RSS，用户就不得不每日都来您的网站检查新的内容。对许多用户来说这样太费时了。通过 RSS feed（RSS 通常被称为 News feed 或 RSS feed），用户们可以使用 RSS 聚合器来更快地检查您的网站更新（RSS 聚合器是用来聚集并分类 RSS feed 的网站或软件）。&lt;/p&gt;</summary>
    
    
    
    <category term="概念" scheme="https://blog.suneshone.com/categories/%E6%A6%82%E5%BF%B5/"/>
    
    
    <category term="RSS" scheme="https://blog.suneshone.com/tags/RSS/"/>
    
    <category term="Feed" scheme="https://blog.suneshone.com/tags/Feed/"/>
    
  </entry>
  
  <entry>
    <title>版权与许可</title>
    <link href="https://blog.suneshone.com/2023/12/20/%E7%89%88%E6%9D%83%E4%B8%8E%E8%AE%B8%E5%8F%AF/"/>
    <id>https://blog.suneshone.com/2023/12/20/%E7%89%88%E6%9D%83%E4%B8%8E%E8%AE%B8%E5%8F%AF/</id>
    <published>2023-12-20T00:49:40.000Z</published>
    <updated>2024-01-10T18:08:34.731Z</updated>
    
    <content type="html"><![CDATA[<p>“版权”在英语中叫做copyright，字面意思就是”复制的权力”（copy + right）。在历史上，”版权”最早确实就是指复制权。它即要保护作者的权利，又不能阻碍人类科技文化成果的传播和共享。</p><span id="more"></span><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>在印刷术出现之前，并不存在”版权”这个概念。中世纪的时候，书都是抄写而成的，所以几乎不存在盗版动机。</p><p>十五世纪中期，印刷术发明，从此出现了盗版现象。为了保护印刷商的利益，使得某些政府希望流通的书籍不至于没人印刷，意大利的一些王国最早规定了印刷特许权制度。王室将某些书的印刷特许权授予某些出版商，在某个期限内，他人不得印刷该书。</p><p>十六世纪，印刷术传到了英国，于是英国也出现了类似由王室授予的”印刷垄断”制度。</p><p>1662年，英国通过了《授权法》（the Licensing Act），规定印刷书籍必需有许可证，同时必须将一部印刷好的副本存放在伦敦出版业公会（the Stationers Company）。这部法律实际上只是将早已存在的做法，明文规定而已。</p><p>17世纪下半叶，在英国哲学家J.弥尔顿、J.洛克等人提出的“人生来自由平等”、“私有财产不可侵犯”等新思想的冲击下，以王室为中心的封建垄断制度开始动摇。经过资产阶级革命，代表新贵族和资产阶级利益的议会制取代了君权神授的君主专制，王室授予印刷商的垄断权亦随之废除。</p><p>在英国，王室授予书商公司的印刷特权废除后，书商和印刷商援引文学产权的理论要求对其印刷的图书给予一定形式的法律保护。1709年1月11日下院提出了一项议案，要求在一定期限内将图书的印刷发行权授予作者或作品原稿的购买者，这项提案成为1710年4月10日生效的《安妮女王法令》。该法令规定：凡已经出版的图书，自法令生效之日起21年内作者有权重印该书；尚未出版的图书，作者享有28年的出版权。</p><p>《安妮法令》是世界上第1部版权法，它废除了王室给书商颁发印刷许可证的封建垄断制度，承认作者有权支配和处理自己的作品，使其成为版权主体，标志着现代版权概念的形成。</p><p>18世纪末，法国资产阶级革命取得胜利，“天赋人权”的口号给版权又注入了新的内容——作品是作者人格的延伸，作者对其作品享有维护其人格的精神权利。承认作者既享有经济权利又享有精神权利的1791和1793年的法国版权法，丰富和发展了现代版权概念。</p><h2 id="版权（copyright）"><a href="#版权（copyright）" class="headerlink" title="版权（copyright）"></a>版权（copyright）</h2><blockquote><p>版权，亦称“著作权”，符号：©。指作者或其他人（包括法人）依法对某一著作物享受的权利。</p><p>版权的取得有两种方式：自动取得和登记取得。在中国，按照著作权法规定，作品完成就自动有版权。 所谓完成，是相对而言的，只要创作的对象已经满足法定的作品构成条件，即可作为作品受到著作权法保护。</p><p><a href="https://baike.baidu.com/item/%E7%89%88%E6%9D%83"><em>版权 百度百科</em></a></p></blockquote><p>绝大多数情况下，只要你未经原作者同意，对作品进行了使用，这里面包括改编、汇编、转换形式、表演、复制、发行、传播等等吧，都是侵权的。同时，跟是否进行商用是没有关系的。即便有“如有侵权，通知删除”（侵删）这样的声明也不能免责。另外未经原作者同意翻译国外网站上的文章，发表在自己的媒体号上，也算是侵权。</p><p>在自己作品发布的时候会在作品前后加上一段“版权声明”, 除了自我证明和震慑盗版的作用，在法律上没有什么明确的效力。不过在<strong>作品被创作完成的那一刻起，作品的版权天然就属于作者了</strong>，登记还是不登记，作者都享有作品的版权。这个规定跟商标和专利是截然不同的。之所以弄个“版权登记”出来，其中一个原因是，作者只需要向版权局提供一次证据，版权局审核后发给作者一个版权登记证书，这个证书就可以基本替代那些证据，否则证明本人就是作品的原创作者，每次都要让作者提供全套的证据，就会给作者带来很大的负担。另外，需要注意的是，版权局对证据的审核只是形式审核，并不对证据的真伪进行实质性的调查、取证、判别，这也给一些假冒登记的人留下了可趁之机。可见，版权登记证书也不是万能的，甚至在有些特殊情况下，法院会裁定版权登记证书是错误或者无效的。</p><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/143624759">你关心的版权问题全在这里 - 岳峰的文章 - 知乎</a></p><h2 id="copyleft"><a href="#copyleft" class="headerlink" title="copyleft"></a>copyleft</h2><p>copyleft：与copyright对应的是copyleft，它的由来是因为程序员Richard Stallman对copyright很不满，认为这阻碍了创新，不利于人们分享成果。因此，他在上个世纪70年代创建了自由软件基金会FSF，致力于智力成果的自由分享。由此Richard Stallman设计出了copyleft 的做法。所谓copyleft，就是为作品附上一个许可证，这个许可证基本上允许你对作品做任何事，除了不能限制他人的自由，但如果你对原作品修改后再发布，那么你也必须使用同样的许可证。所以，只要一个作品被copyleft了，那么此后基于它的所有作品都会被copyleft。所以可以简单总结Copyleft 是一种让程序或其它作品保持自由的通用方法，并要求对Copyleft程序的任何修改和扩展都保持自由。符合Copyleft的协议有GPL协议、LGPL协议、GFDL协议等等；</p><h2 id="许可（license）"><a href="#许可（license）" class="headerlink" title="许可（license）"></a>许可（license）</h2><p>license：license被翻译为许可证，他的本质就是将自己拥有版权的东西，授权给别人使用，同时约定了使用者可以有的权利和必须遵从的义务；也就是说在约定规则下谁可以用，且只能怎么用；自有版权的作品，才有可以设置license的权利，而且前提是没有受到其他作品的license的感染；现今在开源软件行业存在的开源license协议很多，而经过Open Source Initiative组织通过批准的开源协议目前有58种。我们现在常见的开源协议如BSD, GPL, LGPL,MIT等都是OSI批准的协议。如果要开源自己的代码，最好也是选择这些被批准的开源协议。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;“版权”在英语中叫做copyright，字面意思就是”复制的权力”（copy + right）。在历史上，”版权”最早确实就是指复制权。它即要保护作者的权利，又不能阻碍人类科技文化成果的传播和共享。&lt;/p&gt;</summary>
    
    
    
    <category term="指南" scheme="https://blog.suneshone.com/categories/%E6%8C%87%E5%8D%97/"/>
    
    
    <category term="copyright" scheme="https://blog.suneshone.com/tags/copyright/"/>
    
    <category term="license" scheme="https://blog.suneshone.com/tags/license/"/>
    
  </entry>
  
</feed>
